792/100000
# R code to create graph of a complicated distribution
# Referred to on slide 62, Unit 2
num.patients = 20
population.response.prob = 0.20
set.seed(1204)
replicates = 10000
num.responses.replicate = vector("numeric", replicates)
for (i in 1:replicates){
x = sample(c(0,1), size = num.patients, replace = TRUE,
prob = c(1 - population.response.prob,
population.response.prob))
num.responses.replicate[i] = sum(x)
}
response.dist = table(num.responses.replicate)
as.matrix(response.dist)
barplot(response.dist)
as.matrix(response.dist)
barplot(response.dist)
mean(num.responses.replicate)
prop.responses.replicate = num.responses.replicate/replicates
prop.responses.replicate = num.responses.replicate/replicates
response.dist.prob = table(prop.responses.replicate)
as.matrix(response.dist.prop)
prop.responses.replicate = num.responses.replicate/replicates
response.dist.prop = table(prop.responses.replicate)
as.matrix(response.dist.prop)
prop.responses.replicate = num.responses.replicate/replicates
as.matrix(response.dist)
response.dist = table(num.responses.replicate)
response.dist
barplot(response.dist)
num.patients = 20
population.response.prob = 0.20
set.seed(1204)
replicates = 10000
num.responses.replicate = vector("numeric", replicates)
for (i in 1:replicates){
x = sample(c(0,1), size = num.patients, replace = TRUE,
prob = c(1 - population.response.prob,
population.response.prob))
num.responses.replicate[i] = sum(x)
}
# R code to create graph of a complicated distribution
# Referred to on slide 62, Unit 2
num.patients = 20
population.response.prob = 0.20
set.seed(1204)
replicates = 10000
num.responses.replicate = vector("numeric", replicates)
for (i in 1:replicates){
x = sample(c(0,1), size = num.patients, replace = TRUE,
prob = c(1 - population.response.prob,
population.response.prob))
num.responses.replicate[i] = sum(x)
}
response.dist = table(num.responses.replicate)
as.matrix(response.dist)
response.dist #new line in the code
barplot(response.dist)
mean(num.responses.replicate)
num.patients = 20
population.response.prob = 0.80
set.seed(1204)
replicates = 10000
num.responses.replicate = vector("numeric", replicates)
for (i in 1:replicates){
x = sample(c(0,1), size = num.patients, replace = TRUE,
prob = c(1 - population.response.prob,
population.response.prob))
num.responses.replicate[i] = sum(x)
}
response.dist = table(num.responses.replicate)
as.matrix(response.dist)
response.dist #new line in the code
barplot(response.dist)
-2/3.5
pnorm(20/12) - pnorm(-10/12)
pnorm(20/12) - pnorm(10/12)
help(pnorm)
pnorm(100, mean=80, sd = 12) - pnorm(90, mean=80, sd = 12)
qnorm(0.05)
qnorm(0.95)
(12)*(-1.645) + 80
(12)*(1.645 + 80)
(12)*(1.645) + 80
qnorm(0.05, mean=80, sd = 12)
qnorm(0.95, mean=80, sd = 12)
1 - pnorm(-0.93)
1 - pnorm(21, mean = 26.6, sd = 5.8)
qnorm(0.975,mean = 26.4, sd = 5.8)
load("~/Dropbox/working_files/teaching/stat102/spring_2016/exams/midterm_exam/microbiomeData/midterm.RData")
View(cancer.bugs)
hist(cancer.bugs$bug1)
hist(cancer.bugs$bug2)
hist(cancer.bugs$log(bug1)
hist(log(cancer.bugs$bug1))
hist(log(cancer.bugs$bug1))
hist(log(cancer.bugs$bug2))
hist(sqrt(cancer.bugs$bug2))
bug.only.data = cancer.bugs[,-(1:22)]
View(bug.only.data)
hist(log(bug.only.data$bug2)/(1 -log(bug.only.data$bug2)))
transform.1.bug2 = (bug.only.data$bug2) / (1 - bug.only.data)
hist(transform.1.bug2)
transform.1.bug2 = (bug.only.data$bug2) / (1 - bug.only.data$bug2)
hist(transform.1.bug2)
hist(log(transform.1.bug2))
hist(log(transform.1.bug2))
hist(transform.1.bug2)
hist(log(transform.1.bug2))
function (x, ...)
library("TeachingDemos", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
vis.binom()
library(TeachingDemos)
choose(10,6)
dbinom(6, 10, 0.3)
help("dbinom")
dbinom(x = 6, size = 10, prob = 0.3)
1 - dbinom(x= 30, size = 200, prob = 0.12)
1 - pbinom(x= 30, size = 200, prob = 0.12)
1 - pbinom(30, size = 200, prob = 0.12)
pbinom(31, size = 200, prob = 0.12, lower.tail = FALSE)
pbinom(30, size = 200, prob = 0.12, lower.tail = FALSE)
1 - pbinom(30, size = 200, prob = 0.12)
pbinom(31, size = 200, prob = 0.12, lower.tail = FALSE)
pbinom(30, size = 200, prob = 0.12, lower.tail = FALSE)
dbinom(x = 6, size = 10, prob = 0.3)
vis.binom()
vis.binom()
num.patients = 20
population.response.prob = 0.80
set.seed(1204)
replicates = 10000
num.responses.replicate = vector("numeric", replicates)
for (i in 1:replicates){
x = sample(c(0,1), size = num.patients, replace = TRUE,
prob = c(1 - population.response.prob,
population.response.prob))
num.responses.replicate[i] = sum(x)
}
response.dist = table(num.responses.replicate)
#  as.matrix(response.dist)
response.dist #new line in the code
barplot(response.dist)
load("~/Dropbox/working_files/teaching/stat102/spring_2016/exams/midterm_exam/exam/pheno_abundance.Rdata")
plot(pheno.abundance$bug19, pheno.abundance$bug20)
plot(pheno.abundance$bug1, pheno.abundance$bug2)
plot(log(pheno.abundance$bug1), log(pheno.abundance$bug2))
plot(log(pheno.abundance$bug19), log(pheno.abundance$bug20))
boxplot(pheno.abundance$Age ~ pheno.abundance$Stage)
library(TeachingDemos)
vis.binom()
incidence.rate = 30/1000000
city.population.size = 75000
num.city.age.le.14 = city.population.size * 0.20
annual.city.rate = num.city.age.le.14 * incidence.rate
five.year.city.rate = 5*annual.city.rate
five.year.city.rate
prob.8.cases = dpois(8, lambda = five.year.city.rate)
prob.8.cases
incidence.rate.per.child = 30/1000000
city.population.size = 75000
num.city.age.le.14 = city.population.size * 0.20
annual.city.rate = num.city.age.le.14 * incidence.rate.per.child
five.year.city.rate = 5*annual.city.rate
five.year.city.rate
prob.8.cases = dpois(8, lambda = five.year.city.rate)
prob.8.cases
prob.8.or.more.cases = 1 - ppois(7, lambda = five.year.city.rate)
prob.8.or.more.cases
incidence.rate.per.child = 30/1000000
city.population.size = 75000
num.city.age.le.14 = city.population.size * 0.20
annual.city.rate = num.city.age.le.14 * incidence.rate.per.child
five.year.city.rate = 5*annual.city.rate
five.year.city.rate
prob.8.cases = dpois(8, lambda = five.year.city.rate)
prob.8.cases
prob.8.or.more.cases = 1 - ppois(7, lambda = five.year.city.rate)
prob.8.or.more.cases
help(pt)
hes.pub.den = 3416
hes.rev.den = 3871
hes.pub.rand = 3358
hes.pre.rand.saline = 509
hes.rev.den.calc = hes.pub.rand + hes.pre.rand.saline
3336 - 509
hes.pub.den = 3416
hes.rev.den = 3871
hes.pub.rand = 3358
hes.pre.rand.saline = 508
hes.rev.den.calc = hes.pub.rand + hes.pre.rand.saline
hes.rev.den.calc = hes.pub.rand + hes.pre.rand.saline
hes.rev.den.calc
3336 - 508
3416 + 3468
load("nhanes.samp.adult.Rdata")
View(nhanes.samp.adult)
names(nhanes.samp.adult)
mean(nhanes.samp.adult$BMI)
mean(nhanes.samp.adult$BMI, na.rm = TRUE)
nhanes.comp.samp.aduts = complete.cases(nhanes.samp.adult)
sum(is.na(nhanes.samp.adult$BMI))
nrow(nhanes.samp.adult)
mean(nhanes.samp.adult$BMI, na.rm = TRUE)
sd(nhanes.samp.adult$BMI, na.rm = TRUE)
sum(is.na(nhanes.samp.adult$BMI))
nrow(nhanes.samp.adult)
sample.size = num.cases - num.missing
num.cases = nrow(nhanes.samp.adult)
sample.size = num.cases - num.missing
num.missing = sum(is.na(nhanes.samp.adult$BMI))
num.cases = nrow(nhanes.samp.adult)
sample.size = num.cases - num.missing
sample.size
load("nhanes.samp.adult.Rdata")
hist(nhanes.samp.adult$BMI)
help("hist")
hist(nhanes.samp.adult$BMI, breaks = 20)
a = nhanes.samp.adult$BMI < 80
help("t.test")
t.test(nhanes.samp.adult$BMI, alternative = "greater", mu = 21.7, conf.level = 0.95)
t.test(nhanes.samp.adult$BMI[a], alternative = "greater", mu = 21.7, conf.level = 0.95)
load("nhanes.samp.adult.Rdata")
mean(nhanes.samp.adult$BMI)
mean(nhanes.samp.adult$BMI, na.rm = TRUE)
sd(nhanes.samp.adult$BMI, na.rm = TRUE)
num.missing = sum(is.na(nhanes.samp.adult$BMI))
num.missing = sum(is.na(nhanes.samp.adult$BMI))
num.missing
num.cases = nrow(nhanes.samp.adult)
num.cases
sample.size = num.cases - num.missing
sample.size
load("nhanes.samp.adult.Rdata")
mean(nhanes.samp.adult$BMI)
mean(nhanes.samp.adult$BMI, na.rm = TRUE)
sd(nhanes.samp.adult$BMI, na.rm = TRUE)
num.missing = sum(is.na(nhanes.samp.adult$BMI))
num.missing
num.cases = nrow(nhanes.samp.adult)
num.cases
sample.size = num.cases - num.missing
sample.size
x.bar = mean(nhanes.samp.adult$BMI, na.rm = TRUE)
x.bar
x.sd = sd(nhanes.samp.adult$BMI, na.rm = TRUE)
x.sd
num.missing = sum(is.na(nhanes.samp.adult$BMI))
num.missing
num.cases = nrow(nhanes.samp.adult)
num.cases
sample.size = num.cases - num.missing
sample.size
null.pop.mean = 21.7
t.stat = (x.bar - null.pop.mean)/(x.sd/sqrt(sample.size))
null.pop.mean = 21.7
t.stat = (x.bar - null.pop.mean)/(x.sd/sqrt(sample.size))
t.stat
t.test(nhanes.samp.adult$BMI, alternative = "greater", mu = 21.7, conf.level = 0.95)
3347 + 508
3372 - 508
3384 - 508
3358 + 508
load("~/Dropbox/working_files/teaching/stat102/spring_2016/lectures/datafiles/toddlers.Rdata")
View(toddlers)
load("~/Dropbox/working_files/teaching/stat102/spring_2016/R_code/nhanes.samp.adult.Rdata")
View(nhanes.samp.adult)
help("cor")
load("~/Dropbox/working_files/teaching/stat102/spring_2016/lectures/datafiles/nhanes.samp.adult.Rdata")
View(nhanes.samp.adult)
7.05 + (0.049)*(6) - (0.007)*(27) + (1.50)*(1)
18.5/23
18.5/25
17/23
load("/Users/dph/Dropbox/working_files/teaching/lecture_datasets/stat102_data/ed.latino.Rdata")
View(ed.latino)
300/180000
300/180000000
63/40000000
load("~/Dropbox/working_files/teaching/stat102/spring_2016/exams/final_exam/potential_final_problems/arenosa_rnaseq/arenosa_rnaseq.Rdata")
View(arenosa.rnaseq)
-1.66 + 0.018*32
exp(-1.66 + 0.018*32)
load("~/Dropbox/working_files/teaching/stat102/spring_2016/lectures/datafiles/uis/uis.Rdata")
load("~/Dropbox/working_files/teaching/stat102/spring_2016/lectures/datafiles/famuss_09aug2015.Rdata")
View(famuss)
19.3/21.1
load("~/Dropbox/working_files/teaching/stat102/spring_2016/admin/final_scores.Rdata")
View(final.scores)
32 + 40 + 32 + 27 + 33
11 + 80 + 2970
load("~/Dropbox/working_files/teaching/stat102/spring_2016/lectures/datafiles/yrbss.Rdata")
9013/.73
n = 250
delta <- c(-6:0, seq(-6, 0, 0.10))
p = pnorm(-1.96 + delta/sqrt(2 * 12^2/250))
myPDF('power_curve_sample_500.pdf', 7, 3)
library("openintro", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
n = 250
delta <- c(-6:0, seq(-6, 0, 0.10))
p = pnorm(-1.96 + delta/sqrt(2 * 12^2/250))
myPDF('power_curve_sample_500.pdf', 7, 3)
plot(delta, p,
xlab = "Effect Size",
ylab = "Power",
xlim = c(-5, 0),
ylim = 0:1,
type = "n",
log = "x",
axes = FALSE)
help("plot")
n = 250
delta <- c(-6:0, seq(-6, 0, 0.10))
p = pnorm(-1.96 + delta/sqrt(2 * 12^2/250))
myPDF('power_curve_sample_500.pdf', 7, 3)
plot(delta, p,
xlab = "Effect Size",
ylab = "Power",
xlim = c(-5, 0),
ylim = 0:1,
type = "n",
axes = FALSE)
axis(1)
axis(2)
abline(h = 0:1, lty = 2, col = COL[6,2])
lines(n, p, col = COL[1], lwd = 3)
n = 250
delta <- c(-6:0, seq(-6, 0, 0.10))
p = pnorm(-1.96 + delta/sqrt(2 * 12^2/250))
myPDF('power_curve_sample_500.pdf', 7, 3)
plot(delta, p,
xlab = "Effect Size",
ylab = "Power",
xlim = c(-5, 0),
ylim = 0:1,
type = "n",
axes = FALSE)
axis(1)
axis(2)
abline(h = 0:1, lty = 2, col = COL[6,2])
lines(delta, p, col = COL[1], lwd = 3)
dev.off()
setwd("~/Dropbox/working_files/external/nejm/reporter_course/dph_talk/figures")
n = 250
delta <- c(0:6, seq(0, 6, 0.10))
p = pnorm(-1.96 + delta/sqrt(2 * 12^2/250))
myPDF('power_curve_sample_500.pdf', 7, 3)
plot(delta, p,
xlab = "Effect Size",
ylab = "Power",
xlim = c(-5, 0),
ylim = 0:1,
type = "n",
axes = FALSE)
axis(1)
axis(2)
abline(h = 0:1, lty = 2, col = COL[6,2])
lines(delta, p, col = COL[1], lwd = 3)
dev.off()
n = 250
delta <- c(0:6, seq(0, 6, 0.10))
p = pnorm(-1.96 + delta/sqrt(2 * 12^2/250))
myPDF('power_curve_sample_500.pdf', 7, 3)
plot(delta, p,
xlab = "Effect Size",
ylab = "Power",
xlim = c(0, 6),
ylim = 0:1,
type = "n",
axes = FALSE)
axis(1)
axis(2)
abline(h = 0:1, lty = 2, col = COL[6,2])
lines(delta, p, col = COL[1], lwd = 3)
dev.off()
myPDF('power_curve_sample_500.pdf', 7, 3)
plot(delta, p,
xlab = "Effect Size",
ylab = "Power",
xlim = c(0, 6),
ylim = 0:1,
type = "n",
axes = FALSE)
#axis(1)
#axis(2)
abline(h = 0:1, lty = 2, col = COL[6,2])
lines(delta, p, col = COL[1], lwd = 3)
dev.off()
myPDF('power_curve_sample_500.pdf', 7, 3)
plot(delta, p,
xlab = "Effect Size",
ylab = "Power",
xlim = c(0, 6),
ylim = 0:1,
type = "n",
axes = FALSE)
axis(1)
axis(2)
abline(h = 0:1, lty = 2, col = COL[6,2])
lines(delta, p, col = COL[1], lwd = 3)
dev.off()
plot(delta,p)
n = 250
delta <- c(0:6, seq(0, 6, 0.10))
p = pnorm(-1.96 + delta/sqrt(2 * 12^2/250))
plot(delta,p)
delta
p
dev.off()
n = 250
delta <- c(0:6, seq(0, 6, 0.10))
p = pnorm(-1.96 + delta/sqrt(2 * 12^2/250))
plot(delta,p)
help("plot")
dev.off()
n = 250
delta <- c(0:6, seq(0, 6, 0.10))
p = pnorm(-1.96 + delta/sqrt(2 * 12^2/250))
plot(delta,p)
myPDF('power_curve_sample_500.pdf', 7, 3)
plot(delta, p,
xlab = "Effect Size",
ylab = "Power",
xlim = c(0, 6),
ylim = 0:1,
type = "n",
axes = FALSE)
axis(1)
axis(2)
abline(h = 0:1, lty = 2, col = COL[6,2])
lines(delta, p, col = COL[1], lwd = 3)
dev.off()
myPDF
dev.off()
plot(delta,p,xlab = "Effect Size",ylab = "Power",
xlim = x(0,6), ylim=0:1)
dev.off()
n = 250
delta <- c(0:6, seq(0, 6, 0.10))
p = pnorm(-1.96 + delta/sqrt(2 * 12^2/250))
plot(delta,p, xlab = "Effect Size",ylab = "Power",
xlim = c(0,6), ylim=0:1)
dev.off()
n = 250
delta <- c(0:6, seq(0, 6, 0.10))
p = pnorm(-1.96 + delta/sqrt(2 * 12^2/250))
plot(delta,p, xlab = "Effect Size",ylab = "Power",
xlim = c(0,6), ylim=0:1, type = "n")
help(plot)
n = 250
delta <- c(0:6, seq(0, 6, 0.10))
p = pnorm(-1.96 + delta/sqrt(2 * 12^2/250))
plot(delta,p, xlab = "Effect Size",ylab = "Power",
xlim = c(0,6), ylim=0:1, type = "l")
help(plot)
dev.off()
n = 250
delta <- c(0:6, seq(0, 6, 0.10))
p = pnorm(-1.96 + delta/sqrt(2 * 12^2/250))
plot(delta,p, xlab = "Effect Size",ylab = "Power",
xlim = c(0,6), ylim=0:1, type = "p")
my.pdf
my.PDF
myPDF
dev.off()
n = 250
delta <- c(0:6, seq(0, 6, 0.10))
p = pnorm(-1.96 + delta/sqrt(2 * 12^2/250))
plot(delta,p, xlab = "Effect Size",ylab = "Power",
xlim = c(0,6), ylim=0:1, type = "l")
dev.off()
n = 250
delta <- c(0:6, seq(0, 6, 0.10))
power = pnorm(-1.96 + delta/sqrt(2 * 12^2/250))
plot(delta, power)
plot(delta, power, type = "l")
plot(delta, power, type = "o")
plot(delta,p, xlab = "Effect Size",ylab = "Power",
xlim = c(0,6), ylim=0:1, type = "n")
lines(lowess(delta,power))
curv(pnorm(-1.96 + delta/sqrt(2 * 12^2/250)), 0,6, type="l")
library(graphics)
curv(pnorm(-1.96 + delta/sqrt(2 * 12^2/250)), 0,6, type="l")
curve(pnorm(-1.96 + delta/sqrt(2 * 12^2/250)), 0,6, type="l")
n = 250
delta <- c(0:6, seq(0, 6, 0.10))
reporter.power = function(x) pnorm(-1.96 + x/sqrt(2 * 12^2/250))
curve(reporter.power, 0, 6, n = 1000)
curve(pnorm(-1.96 + delta/sqrt(2 * 12^2/250)), 0,6, type="l", col=COL[1])
curve(pnorm(-1.96 + delta/sqrt(2 * 12^2/250)), 0,6, type="l")
reporter.power = function(x) pnorm(-1.96 + x/sqrt(2 * 12^2/250))
curve(reporter.power, 0, 6, n = 1000)
curve(reporter.power, 0, 6, n = 1000, col=COL[1])
curve(reporter.power, 0, 6, n = 1000, col=COL[1], xlab = "Effect Size",
ylab="Power")
curve(reporter.power, 0, 6, n = 1000, col=COL[1], xlab = "Effect Size",
ylab="Power", lwd=3)
myPDF
curve(reporter.power, 0, 6, n = 1000, col=COL[1], xlab = "Effect Size",
ylab="Power", lwd=3, width = 5, height = 3)
warnings
warnings()
reporter.power = function(x) pnorm(-1.96 + x/sqrt(2 * 12^2/250))
curve(reporter.power, 0, 6, n = 1000, col=COL[1], xlab = "Effect Size",
ylab="Power", lwd=3)
library(graphics)
dev.off()
reporter.power = function(x) pnorm(-1.96 + x/sqrt(2 * 12^2/250))
curve(reporter.power, 0, 6, n = 1000, col=COL[1], xlab = "Effect Size",
ylab="Power", lwd=3)
