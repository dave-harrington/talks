4.2/2.8
outcome = rbind(c(1,1), c(31,62))
fisher.test(outcome)
## calculations for trisomy 21 example, unit 2
## parameters of the problem
tri21.prevalence = 1/800
cfdna.sens = 0.980
cfdna.spec = 0.995
pop.size = 10000
## expected number of healthy children and children with
##   the disorder
expected.cases = pop.size * tri21.prevalence
expected.cases
expected.noncases = pop.size - expected.cases
expected.noncases
##  Number of children testing positive will consist
##     of both true and false positives
expected.true.pos.tests = expected.cases * cfdna.sens
expected.true.pos.tests
expected.false.pos.tests = expected.noncases * (1 - cfdna.spec)
expected.false.pos.tests
##  now calculate expected number of positive tests
##      in population
expected.pos.tests = expected.true.pos.tests + expected.false.pos.tests
expected.pos.tests
## Among all positive tests, calculate the fraction of positive tests
##    correctly identifying trisomy 21
cfdna.ppv = expected.true.pos.tests /expected.pos.tests
cfdna.ppv
26/137
10/70
0.95^50
1 - (0.95^50)
##  coding for the mammogram problem
##  begin with one set of women
##  set parameters and initialize
prob.false.positive = 0.05
num.women = 50
set.seed(2401)
## initialize population
## default for function vector() sets values to 0
## This call to vector() creates a numeric vector
##    of length num.women, with all values = 0
test.result = vector("numeric", num.women)
## now sample from test results
##    using function sample()
## Type help(sample) for a complete explanation of
##    the function
##  0 = neg result, 1 = post result
test.result = sample(c(0,1), size = num.women,
prob=c(1 - prob.false.positive, prob.false.positive),
replace = TRUE)
View(as.matrix(test.result))
## at least one positive test?
## Use the logical condition (num.pos.tests > 0) sets
##    the variable at.least.one.pos = TRUE if there is
##    at least one positive test
num.pos.tests = sum(test.result)
at.least.one.pos = (num.pos.tests > 0)
at.least.one.pos
##  Also look at the number and proportion of positive tests
num.pos.tests = sum(test.result)
prop.pos.tests = num.pos.tests/num.women
prop.pos.tests
prob.false.positive = 0.05
num.women = 50
num.replicates = 5000
set.seed(2401)
## initialize for replicates
at.least.one.pos = vector("numeric", num.replicates)
## Nest earlier simulation in a `for' loop which
##    repeats the 50 mammograms num.replicates times
##  Record in each for() loop whether or not at least one
##    test was positive
for(ii in 1:num.replicates){
test.result = vector("numeric", num.women)
test.result = sample(c(0,1), size = num.women,
prob=c(1 - prob.false.positive, prob.false.positive),
replace = TRUE)
num.pos.tests = sum(test.result)
## at least one positive test?
at.least.one.pos[ii] = (num.pos.tests > 0)
}
## Now calculate the proportion of replicates that produced
##   at least one positive test
sum(at.least.one.pos)/num.replicates
prob.false.negative = 0.10
num.employees = 4
num.replicates = 100000
set.seed(4239)
## initialize for replicates
at.least.one.pos = vector("numeric", num.replicates)
## Nest earlier simulation in a `for' loop which
##    repeats the 50 mammograms num.replicates times
##  Record in each for() loop whether or not at least one
##    test was positive
for(ii in 1:num.replicates){
test.result = vector("numeric", num.employees)
test.result = sample(c(0,1), size = num.employees,
prob=c(prob.false.negative, 1 - prob.false.negative),
replace = TRUE)
num.pos.tests = sum(test.result)
## at least one positive test?
at.least.one.pos[ii] = (num.pos.tests > 0)
}
View(at.least.one.pos)
## Now calculate the proportion of replicates that produced
##   at least one positive test
options(digits=10)
a = sum(at.least.one.pos)/num.replicates
a
##  coding for the employee problem
##  begin with one set of employees
##  set parameters and initialize
prob.false.negative = 0.10
num.employees = 4
set.seed(4239)
## initialize population
## default for function vector() sets values to 0
## This call to vector() creates a numeric vector
##    of length num.employees, with all values = 0
test.result = vector("numeric", num.employees)
## now sample from test results
##    using function sample()
## Type help(sample) for a complete explanation of
##    the function
##  0 = neg result, 1 = post result
test.result = sample(c(0,1), size = num.employees,
prob=c(prob.false.negative, 1 - prob.false.negative),
replace = TRUE)
View(as.matrix(test.result))
tri21.prevalence = 1/800
cfdna.sens = 0.980
cfdna.spec = 0.995
pop.size = 10000
## expected number of healthy children and children with
##   the disorder
expected.cases = pop.size * tri21.prevalence
expected.cases
expected.noncases = pop.size - expected.cases
expected.noncases
##  Number of children testing positive will consist
##     of both true and false positives
expected.true.pos.tests = expected.cases * cfdna.sens
expected.true.pos.tests
expected.false.pos.tests = expected.noncases * (1 - cfdna.spec)
expected.false.pos.tests
##  now calculate expected number of positive tests
##      in population
expected.pos.tests = expected.true.pos.tests + expected.false.pos.tests
expected.pos.tests
## Among all positive tests, calculate the fraction of positive tests
##    correctly identifying trisomy 21
cfdna.ppv = expected.true.pos.tests /expected.pos.tests
cfdna.ppv
23/29
23/30
help("summary")
help("summarize")
help(by)
load("~/Dropbox/working_files/teaching/stat102/spring_2016/lectures/datafiles/famuss_09aug2015.Rdata")
View(famuss)
t.test(famuss$ndrm.ch ~ famuss$sex)
summary(famuss$ndrm.ch ~ famuss$sex)
prevalence = 0.05
sensitivity = 0.20
specificity= 0.94
pop.size = 10000
expected.cases = pop.size * prevalence
expected.cases
expected.noncases = pop.size - expected.cases
expected.noncases
##  Number of children testing positive will consist
expected.true.pos.tests = expected.cases * sensitivity
expected.true.pos.tests
expected.false.pos.tests = expected.noncases * (1 - specificity)
expected.false.pos.tests
##  now calculate expected number of positive tests
##      in population
expected.pos.tests = expected.true.pos.tests + expected.false.pos.tests
expected.pos.tests
## Among all positive tests, calculate the fraction of positive tests
expected.true.neg.test = expected.noncases * specificity
1200 * 12
outcome = rbind(c(1,444), c(4,447))
fisher.test(outcome)
chisq.test(outcome, correct=FALSE)
prop.test(outcome)
77/1888
outcome = rbind(c(12,205 - 12), c(4,132-4))
fisher.test(outcome)
outcome = rbind(c(12,205 - 12), c(3,132-3))
fisher.test(outcome)
help(chisq.test)
help("contrasts")
p.a = 0.992*(2*0.8981 + 0.992)
p.a
p.a = 0.0992*(2*0.8981 + 0.0992)
p.a
p.sct = (3/8) / p.a
p.sct
p.sct.cross.b = (1/8) * (0.8981)*(0.0992)
p.sct.cross.c = (1/8) * (0.8981)*(0.0992)
p.sct.cross.d = (1/8)* (0.0992)^2
p.a = 0.0992*(2*0.8981 + 0.0992)
p.sct = p.sct.cross.b + p.sct.cross.c + p.sct.cross.c
p.sct
p.sct.cross.b = (1/8) * (0.0027)*(0.0992)
p.sct.cross.c = (1/2) * (0.0271)*(0.0992)
p.sct.cross.d = (1/2)* (0.0992)^2
p.sct = p.sct.cross.b + p.sct.cross.c + p.sct.cross.c
p.sct
p.sct.cross.b = (1/2) * (0.0027)*(0.0992)
p.sct.cross.c = (1/2) * (0.0271)*(0.0992)
p.sct.cross.d = (1/2)* (0.0992)^2
p.sct = p.sct.cross.b + p.sct.cross.c + p.sct.cross.c
p.sct
p.sct.cross.b = (1/2) * (0.0027)*(0.0992)
p.sct.cross.c = (1/2) * (0.0271)*(0.0992)
p.sct.cross.d = (1/2)* (0.0992)^2
p.sct = p.sct.cross.b + p.sct.cross.c + p.sct.cross.c
p.sct
# now calculate prob neither parent has SCD
p.A = 0.8981 + 0.0992
solution = p.sct/p.A
solution
p.sct.cross.b = (1/2) * (0.8981)*(0.0992)
p.sct.cross.c = (1/2) * (0.8981)*(0.0992)
p.sct.cross.d = (1/2)* (0.0992)^2
p.sct = p.sct.cross.b + p.sct.cross.c + p.sct.cross.c
p.sct
# now calculate prob neither parent has SCD
p.A = 0.8981 + 0.0992
solution = p.sct/p.A
solution
(0.5)*(0.8991)*(0.0992) + (0.5)*(0.8991)*(0.0992) +
(0.5)*(0.0992)^2
0.8991 + 0.0992
(82 + 82+ 89 + 74)/4
(21.2 - 17.5)/21.2
0.4*(20 - 32)^2 + 0.6*(40 - 32)^2
1556 + 96
sqrt(1556 + 96)
3.0^2 + 3.0^2 + 3.0^2 + 3.1^2
sqrt(3.0^2 + 3.0^2 + 3.0^2 + 3.1^2)
sqrt(96)
sd.x = 39.45
sd.y = 9.08
mu.x = 1010
mu.y = 980
numerator.rho = (968 - 1010)* (968 - 980) +
(968 - 1010) * (988 - 980) +
(1008 - 1010) * (968 - 980) +
(1008 - 1010) * (988 - 980) +
(1028 - 1010) * (968 - 980) +
(1028 - 1010) * (988 - 980) +
(1108 - 1010) * (968 - 980) +
(1108 - 1010) * (988 - 980)
denominator.rho = sd.x * sd.y
rho = numerator.rho/denominator.rho
rho
(1556 + 96) + (2)*(39.45)*(9.80)*(-0.90)
sqrt((1556 + 96) + (2)*(39.45)*(9.80)*(-0.90))
186/166
186/666
666/186
load("~/Dropbox/working_files/teaching/stat102/spring_2016/lectures/datafiles/nhanes.Rdata")
View(NHANES)
names(NHANES)
hist(NHANES$BPSysAve)
mean(NHANES$BPSysAve)
mean(NHANES$BPSysAve, na.rm = TRUE)
a = NHANES$Diabetes == "Yes"
table(a)
mean(NHANES$BPSysAve[a], na.rm = TRUE)
help("t.test")
t.test(NHANES$BPSysAve[a], alternative = ("two-sided"), mu = 120)
t.test(NHANES$BPSysAve[a], alternative = ("two.sided"), mu = 120)
b = NHANES$SmokeNow=="Yes"
table(b)
t.test(NHANES$BPSysAve[b], alternative = ("two.sided"), mu = 120)
help("table")
table(NHANES$BPSysAve, NHANES$SmokeNow, useNA = "always")
addmargins(table(NHANES$BPSysAve, NHANES$SmokeNow, useNA = "always"))
load("~/Dropbox/working_files/teaching/stat102/spring_2016/lectures/datafiles/nhanes.samp.adult.Rdata")
View(nhanes.samp.adult)
hist(nhanes.samp.adult$BPSysAve)
mean(nhanes.samp.adult$BPSysAve, na.rm = TRUE)
mean(nhanes.samp.adult$BPSysAve[a], na.rm = TRUE)
t.test(nhanes.samp.adult$BPSysAve[a], alternative = ("two.sided"), mu = 120)
b = nhanes.samp.adult$SmokeNow=="Yes"
table(b)
table(b, useNA="always")
addmargins(table(nhanes.samp.adult$BPSysAve, nhanes.samp.adult$SmokeNow, useNA = "always"))
table(a,  useNA = "always")
mean(nhanes.samp.adult$BPSysAve[a], na.rm = TRUE)
t.test(nhanes.samp.adult$BPSysAve[a], alternative = ("two.sided"), mu = 120)
a = nhanes.samp.adult$Diabetes == "Yes"
table(a,  useNA = "always")
t.test(nhanes.samp.adult$BPSysAve[a], alternative = ("two.sided"), mu = 120)
b = nhanes.samp.adult$SmokeNow=="Yes"
table(b, useNA="always")
table(nhanes.samp.adult$SleepHrsNight, useNA = "always")
mean(nhanes.samp.adult$SleepHrsNight)
t.test(nhanes.samp.adult$SleepHrsNight, "two.sided", mu = 8)
t.test(nhanes.samp.adult$SleepHrsNight, alternative =  "two.sided", mu = 8)
t.test(nhanes.samp.adult$SleepHrsNight, alternative =  "less", mu = 6)
t.test(nhanes.samp.adult$SleepHrsNight, alternative =  "greater", mu = 6)
load("~/Dropbox/working_files/teaching/stat102/spring_2016/psets/pset_08/datasets/fev.Rdata")
View(fev)
t.test(nhanes.samp.adult$SleepHrsNight, alternative =  "less", mu = 7)
sd(nhanes.samp.adult$SleepHrsNight)
(29.7 - 21.7)/(7.7/sqrt(150))
29.9 - 7.7/sqrt(150)
0.03/(0.16/sqrt(21))
2 * pnorm(-0.859)
0.3 - 1.96*(0.16/sqrt(21))
0.3 + 1.96*(0.16/sqrt(21))
0.53 + 1.96*(0.16/sqrt(21))
0.53 - 1.96*(0.16/sqrt(21))
.54*.72
.54*.74
.54*.78
t = (4.4 - 0.50)/(2.3/sqrt(19))
t.stat = (4.4 - 0.50)/(2.3/sqrt(19))
t.stat
wet.suit.velocity = c(1.57, 1.47, 1.24, 1.35, 1.22,
1.75, 1.64, 1.57, 1.56, 1.53,
1.49, 1.51 )
swim.suit.velocity = c(1.49, 1.37, 1.35, 1.27, 1.12,
1.64, 1.59, 1.52, 1.50, 1.45,
1.44, 1.41)
swimmer.number = c(1:12)
swim.suit.study = as.data.frame(cbind(swimmer.number,
wet.suit.velocity,
swim.suit.velocity))
swim.suit.study
install.packages("xtable")
library("xtable", lib.loc="~/Library/R/3.0/library")
xtable(swim.suit.study)
xtable(swim.suit.study, caption="Paired Swim Suit Data",
label="swimSuitTimes")
xtable(swim.suit.study, caption="Paired Swim Suit Data",
label="swimSuitTimes")
velocity.diff = wet.suit.velocity - swim.suit.study
dotplot(velocity.diff)
plot(velocity.diff)
dotchart(velocity.diff)
dotchart(as.vector(velocity.diff))
dotchart(as.matrix(velocity.diff))
(12^2 + 12^2)(1.96 + 0.84)^2/(-3.0)^2
(12^2 + 12^2)*(1.96 + 0.84)^2/(-3.0)^2
0.975 + (-3)*(sqrt(12^2/251 + 12^2/251))
-0.975 + (3)*(sqrt(12^2/251 + 12^2/251))
help(power.t.test)
power.t.test(n = 251,delta = 3, sd=12, type="two.sample",
alternative="two.sided")
-1.96 + (3)*(sqrt(12^2/251 + 12^2/251))
n <- c(10:500, seq(510, 2000, 10), seq(2100, 10000, 100))
se <- sapply(n, function(x) sqrt(2 * 12^2 / x))
left.reject <- -1.96 * se
x <- (left.reject - (-3)) / se
power.sample = function(x) pt(x, 2 * n - 2))
n <- c(10:500, seq(510, 2000, 10), seq(2100, 10000, 100))
se <- sapply(n, function(x) sqrt(2 * 12^2 / x))
left.reject <- -1.96 * se
x <- (left.reject - (-3)) / se
power.sample = function(x) pt(x, 2 * n - 2)
curve(reporter.power, 0, 6, n = 1000, col=COL[1], xlab = "Effect Size mmHG",
ylab="Power", lwd=2)
n <- c(10:500, seq(510, 2000, 10), seq(2100, 10000, 100))
se <- sapply(n, function(x) sqrt(2 * 12^2 / x))
left.reject <- -1.96 * se
x <- (left.reject - (-3)) / se
power.sample = function(x) pt(x, 2 * n - 2)
curve(power.sample, 0, 6, n = 1000, col=COL[1], xlab = "Effect Size mmHG",
ylab="Power", lwd=2)
library(openintro)
n <- c(10:500, seq(510, 2000, 10), seq(2100, 10000, 100))
se <- sapply(n, function(x) sqrt(2 * 12^2 / x))
left.reject <- -1.96 * se
x <- (left.reject - (-3)) / se
p <- pt(x, 2 * n - 2)
plot(n, p,
xlab = "Sample Size Per Group",
ylab = "Power",
xlim = c(20, 5000),
ylim = 0:1,
type = "n",
log = "x",
axes = FALSE)
axis(1)
axis(2)
abline(h = 0:1, lty = 2, col = COL[6,2])
lines(n, p, col = COL[1], lwd = 3)
library(graphics)
library(openintro)
data("COL")
n.total = 2*250
reporter.power = function(x) pnorm(-1.96 + x/sqrt(2 * 12^2/250))
curve(reporter.power, 0, 6, n = 1000, col=COL[1], xlab = "Effect Size mmHG",
ylab="Power", lwd=2, axes="FALSE")
library(graphics)
library(openintro)
data("COL")
n.total = 2*250
reporter.power = function(x) pnorm(-1.96 + x/sqrt(2 * 12^2/250))
curve(reporter.power, 0, 6, n = 1000, col=COL[1], xlab = "Effect Size mmHG",
ylab="Power", lwd=2, axes="FALSE")
axis(1)
axis(2)
library(graphics)
library(openintro)
data("COL")
n.total = 2*250
reporter.power = function(x) pnorm(-1.96 + x/sqrt(2 * 12^2/250))
curve(reporter.power, 0, 6, n = 1000, col=COL[1], xlab = "Effect Size mmHG",
ylab="Power", lwd=2, axes="FALSE")
axis(1)
axis(2)
abline(h = 0:1, lty = 2, col = COL[6,2])
setwd("~/Dropbox/working_files/external/nejm/reporter_course/dph_talk")
load("datafiles/fev.Rdata")
short.smoke = fev$Hgt < 61.5 & fev$Smoke == 1
short.nonsmoke = fev$Hgt < 61.5 & fev$Smoke == 0
tall.smoke = fev$Hgt >= 61.5 & fev$Smoke == 1
tall.nonsmoke = fev$Hgt >= 61.5 & fev$Smoke == 0
boxplot(fev$fev[short.nonsmoke], fev$fev[short.smoke],
fev$fev[tall.nonsmoke], fev$fev[tall.smoke])
median(fev$fev[short.smoke])
median(fev$fev[short.nonsmoke])
median(fev$fev[tall.smoke])
median(fev$fev[tall.nonsmoke])
mean(fev$fev[short.smoke])
mean(fev$fev[short.nonsmoke])
mean(fev$fev[tall.smoke])
mean(fev$fev[tall.nonsmoke])
smoking.status = factor(fev$Smoke, labels=c("No", "Yes"))
lm(fev$fev ~ smoking.status  + fev$Age + fev$Hgt)
lm(fev$fev ~ smoking.status  + fev$Age + fev$Hgt + fev$Age*fev$Hgt)
summary(lm(fev$fev ~ smoking.status  + fev$Age + fev$Hgt))
summar(lm(fev$fev ~ smoking.status  + fev$Age + fev$Hgt + fev$Age*fev$Hgt))
summary(lm(fev$fev ~ smoking.status  + fev$Age + fev$Hgt + fev$Age*fev$Hgt))
lm(fev$fev ~ smoking.status + fev$Hgt + fev$Age + fev$Sex)
summary(lm(fev$fev ~ smoking.status))
summary(lm(fev$fev ~ smoking.status + fev$Age))
summary(lm(fev$fev ~ smoking.status + fev$Hgt + fev$Age))
summary(lm(fev$fev ~ smoking.status + fev$Hgt + fev$Age + fev$Sex))
summary(lm(fev$fev ~ smoking.status  + fev$Age + fev$Hgt + fev$Age*fev$Hgt))
summary(lm(fev$fev ~ smoking.status + fev$Hgt + fev$Age + fev$gender))
gender = factor(fev$Sex, labels=c("Female", "Male"))
summary(lm(fev$fev ~ smoking.status + fev$Hgt + fev$Age + fev$gender))
summary(lm(fev$fev ~ smoking.status + fev$Hgt + fev$Age + gender))
